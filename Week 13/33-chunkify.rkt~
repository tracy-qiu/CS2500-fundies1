;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname 1-chunkify) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; chunkify : (X) [List-of X] Nat[>0] -> [List-of [List-of X]]
; Groups the input list into sub-lists of supplied length
; Termination: we are always taking at least nat elements from the supplied list
 
(check-expect (chunkify '() 2) '())
(check-expect (chunkify (list 1 2 3) 1) (list (list 1) (list 2) (list 3)))
(check-expect (chunkify (list 1 2 3) 2) (list (list 1 2) (list 3)))
(check-expect (chunkify (list "a" "b" "c" "d" "e" "f") 3)
              (list (list "a" "b" "c") (list "d" "e" "f")))








































; Design the function gcd that accepts two positive integers and computes their
; greatest common divisor (the largest integer that cleanly divides them both).
; Let's use an insight from math called Euclid's algorithm:
; if we take (gcd L S) with L > S, then (gcd L S) = (gcd S (remainder L S)) â€“ until S=0.

#|
; gcd : PositiveInteger PositiveInteger -> PositiveInteger
; Computes the GCD
; Termination: we're always recurring on something smaller

(check-expect (gcd 6 5) 1)
(check-expect (gcd 6 4) 2)
(check-expect (gcd 27 81) 27)
(check-expect (gcd 36 81) 9)
|#














