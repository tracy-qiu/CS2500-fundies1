;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname hw6-problem2) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))

;; NOTE: For all function designs, you must have 2+ tests and no halloween
;; colors

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Problem 2

;; The final objective in this problem is to design these three functions:
;;
;; 1. hello-goodbye: given a list of names, produces two strings for each
;;    string NAME: "Hello NAME!" and "Goodbye NAME!".
;;
;; 2. double-double: given a list of numbers, produces a list with two numbers
;;    for each number x: (* 2 x) and (* 4 x).
;;
;; 3. string-length-length : given a list of strings, produces a list with two 
;;    numbers for each string: the length, followed by half the length.
;;
;; However, you must not use the list template when you define them!
;;
;; Instead, first design a list abstraction (following the list template), then
;; use that abstraction to design the three functions.
;;
;; To help you get started, here are the tests for the three functions.
;; However, you should also test your abstraction independently.

(check-expect (hello-goodbye '()) '())
(check-expect
 (hello-goodbye (cons "Alice" (cons "Bob" '())))
 (cons "Hello Alice!" (cons "Goodbye Alice!" (cons "Hello Bob!" (cons "Goodbye Bob!" '())))))


(check-expect (double-double '()) '())
(check-expect (double-double (cons 10 (cons 20 '())))
              (cons 20 (cons 40 (cons 40 (cons 80 '())))))


(check-expect (string-length-length '()) '())
(check-expect (string-length-length (cons "Hello" '()))
              (cons 5 (cons 2.5 '())))

;; hello-goodbye : [List-of String] -> [List-of String]
;; Greets and says goodbye to everyone in the list.
(define (hello-goodbye los)
  (cond
    [(empty? los) '()]
    [(cons? los) (cons (string-append "Hello " (first los) "!")
                       (cons (string-append "Goodbye " (first los) "!")
                 (hello-goodbye (rest los))))])) 

(define (double-double lon)
  (cond
    [(empty? lon) '()]
    [(cons? lon) (cons (* (first lon) 2)
                       (cons (* (first lon) 4)
                 (double-double (rest lon))))])) 

(define (string-length-length los)
  (cond
    [(empty? los) '()]
    [(cons? los) (cons (string-length (first los))
                       (cons (* (string-length (first los)) 0.5) 
                 (string-length-length (rest los))))]))

(define (two-list los op item1 item2)
  (cond
    [(empty? los) '()]
    [(cons? los) (cons (op item1(first los))
                       (cons (/ (op (first los)) 2) 
                 (two-list (rest los))))]))

(define (hello-goodbye los)
  (two-list los string-append "Hello" "Goodbye"))

(define (double-double lon)
  (two-list los * op2)
