;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname hw4-problem1) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Problem 1

;; Consider the following structure definitions:

(define-struct guitar [brand-name color electric?])
(define-struct drum-kit [brand-name electric?])
(define-struct saxophone [brand-name])
(define-struct piano [brand-name])

;; Part A

;; Design four data types called Guitar, DrumKit, Saxophone, and Piano: one for 
;; each structure. Ensure you complete all steps of the data design recipe for 
;; all four data types.

;; [TODO] Four complete data designs

(define-struct guitar [brand-name color electric?])

; A Guitar is a (make-guitar String String Boolean)
; - where brand-name is the brand name of the guitar
; - color is the color of the guitar
; - electric? is whether the guitar is electric or not
; Interpretation: description of a guitar

(define GUITAR-1 (make-guitar "Yamaha" "red" #true))
(define GUITAR-2 (make-guitar "Gibson" "blue" #false))

(define (guitar-temp g)
  (... (guitar-brand-name g) ...
       (guitar-color g) ...
       (guitar-electric? g) ...))






(define-struct drum-kit [brand-name electric?])

; A Guitar is a (make-drum-kit String Boolean)
; - where brand-name is the brand name of the drum kit
; - electric? is whether the drum kit is electric or not
; Interpretation: description of a drum kit

(define DRUM-KIT-1 (make-drum-kit "Tama" #true))
(define DRUM-KIT-2 (make-drum-kit "DW" #false))

(define (drum-kit-temp dk)
  (... (drum-kit-brand-name dk) ...
       (drum-kit-electric? dk) ...))





(define-struct saxophone [brand-name])

; A Saxophone is a (make-saxophone String)
; - where brand-name is the brand name of the saxophone
; Interpretation: description of a saxophone

(define SAXOPHONE-1 (make-saxophone "Selmer"))
(define SAXOPHONE-2 (make-saxophone "Jean Paul"))

(define (drum-kit-temp s)
  (... (drum-kit-brand-name s) ...))




(define-struct piano [brand-name])

; A Piano is a (make-piano String)
; - where brand-name is the brand name of the piano
; Interpretation: description of a piano

(define SAXOPHONE-1 (make-piano "Kawai"))
(define SAXOPHONE-2 (make-piano "Baldwin"))

(define (piano-temp p)
  (... (piano-brand-name p) ...))







;; Part B

;; Design a data type called Instrument, which can represent any one of the
;; four instruments defined above.

;; [TODO] Data design recipe


; An Instrument is one of:
; - Guitar
; - DrumKit
; - Saxophone
; - Piano
; - #false

(define (instrument-temp i)
  (...
   (cond
     [(Guitar? i) ... i ...]
     [(DrumKit? i) ... i ...]
     [(Saxophone? i) ... i ...]
     [(Piano? i) ... i ...]
     [else #false])))





;; Part C

;; Design a data type called Band, which may have 1, 2, or 3 instruments.
;; The Band data type should hold information about all the instruments in
;; the band.

;; [TODO] Data design recipe


(define-struct band [instrument1 instrument2 instrument3])

; A Band is a (make-band Instrument Instrument Instrument)
; - where instrument1 is the first instrument of the band 
; - where instrument2 is the second instrument of the band 
; - where instrument3 is the third instrument of the band 
; Interpretation: list of instruments in band composed of 1, 2, or 3 instruments

(define BAND-1 (make-band Guitar DrumKit Saxophone))
(define BAND-2 (make-band DrumKit Piano #false))
(define BAND-3 (make-band Guitar #false #false))

(define (band-temp b)
  (... (band-instrument1 b) ...
       (band-instrument2 b) ...
       (band-instrument3 b) ...))



;; Part D

;; Design a function that takes a band and produces another band that is
;; identical, except that all guitars and drums become electric!

;; [TODO] Function design

; band-electric : Band -> Band
; takes given band and produces another band that is identical
; except all guitars and drums become electric

(define BAND-AFTER (make-band
                    (make-guitar
                     (guitar-brand-name (band-instrument1 BAND-1) 
                      (guitar-color (band-instrument1 BAND-1)) 
                      #true))
                    (make-drum-kit
                     ((guitar-brand-name (band-instrument1 BAND-1)  
                      #true))
                    
                      

(check-expect (update-band BAND-1) BAND-AFTER)

(define (update-band b)
  (... (band-instrument1 b) ...
       (band-instrument2 b) ...
       (band-instrument3 b) ...))









