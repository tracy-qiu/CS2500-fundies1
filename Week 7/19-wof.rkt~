;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname 19-wof) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)
 
(define-struct guessed [char])
(define-struct unguessed [char])

; A Game1String is one of:
; - (make-guessed 1String)
; - (make-unguessed 1String)
; A 1String in the word, either it has been guessed already or it is still hidden
 
(define G1S-1 (make-guessed "a"))
(define G1S-2 (make-unguessed "a"))
 
(define (g1s-temp g1s)
  (...
   (cond
     [(guessed? g1s) (... (guessed-char g1s) ...)]
     [(unguessed? g1s) (... (unguessed-char g1s) ...)])))
 
; A WorldOfFortune (WoF) is a [List-of Game1String]
; The current state of the game
 
(define WOF-0 (list (make-unguessed "h")
                    (make-unguessed "e")
                    (make-unguessed "l")
                    (make-unguessed "l")
                    (make-unguessed "o")))
 
(define WOF-1 (list (make-unguessed "h")
                    (make-guessed "e")
                    (make-unguessed "l")
                    (make-unguessed "l")
                    (make-unguessed "o")))
 
(define WOF-2 (list (make-unguessed "h")
                    (make-guessed "e")
                    (make-guessed "l")
                    (make-guessed "l")
                    (make-unguessed "o")))
 
(define WOF-3 (list (make-guessed "h")
                    (make-guessed "e")
                    (make-guessed "l")
                    (make-guessed "l")
                    (make-unguessed "o")))
 
(define WOF-4 (list (make-guessed "h")
                    (make-guessed "e")
                    (make-guessed "l")
                    (make-guessed "l")
                    (make-guessed "o")))

(define (wof-temp wof)
  (...
   (cond
     [(empty? wof) ...]
     [(cons? wof) ...
      (g1s-temp (first wof)) ...
      (wof-temp (rest wof)) ...])))
 
 
; guessing-game : String -> WoF
; Run the world of fortune game on s
 
(define (guessing-game s)
  (big-bang (map make-unguessed (explode s))
    [to-draw draw-wof]
    [stop-when all-guessed? draw-wof]
    [on-key handle-key]))


; draw-wof : WoF -> Image
; Draws the current game state

(define IMAGE-TEXT-SIZE 35)
(define IMAGE-COLOR "red")

(check-expect (draw-wof WOF-0) (text "?????" IMAGE-TEXT-SIZE IMAGE-COLOR))
(check-expect (draw-wof WOF-1) (text "?e???" IMAGE-TEXT-SIZE IMAGE-COLOR))

(define (draw-wof wof)
  (text (wof->string wof) IMAGE-TEXT-SIZE IMAGE-COLOR))  

; wof->string : WoF -> String
; converts a d WoF into a string

(check-expect (wof->string WOF-0) "?????")
(check-expect (wof->string WOF-1) "?e???")

(define (wof->string wof)
  (foldr string-append
         ""
         (map g1s->1s wof)))

; g1s->1s :Game1String -> 1String
; produces the character representing a Game1String

(check-expect (g1s->1s GIS-1) "a")
(check-expect (g1s->1s GIS-2) "?")

(define (g1s->1s g1s)
  (cond
    [(guessed? g1s) (guessed-char g1s)]
    [(unguessed? g1s) "?"]))
 
; all-guessed? : WoF -> Boolean
; Have all the characters been guessed?

(check-expect (all-guessed? '()) #true)
(check-expect (all-guessed? WOF-0) #false)
(check-expect (all-guessed? WOF-1) #false)
(check-expect (all-guessed? WOF-4) #true)

; (Game1String) [Game1String -> Boolean] [List-of Game1String] -> Boolean

(define (all-guessed? wof)
  (andmap guessed? wof))

(define (all-guessed?/v1 wof)
  (cond
    [(empty? wof) #true]
    [(cons? wof)
     (and
      (guessed? (first wof)) 
      (all-guessed?/v1 (rest wof)))])) 

; (X) [X -> Boolean] [List -of X] -> Boolean

(define (all-true? p? lox)
  (cond
    [(empty? lox) #true]
    [(cons? lox)
     (and
      (p? (first lox)) 
      (all-true? (rest lox)))]))
 
; handle-key : WoF KeyEvent -> WoF
; Clear out all instances of WoF

(check-expect (handle-key WOF-0 "a") WOF-0)
(check-expect (handle-key WOF-0 "e") WOF-1)
(check-expect (handle-key WOF-1 "l") WOF-2)
(check-expect (handle-key WOF-2 "h") WOF-3)
(check-expect (handle-key WOF-3 "o") WOF-4)


(define (handle-key wof ke)
  (cond
    [(empty? wof) wof]
    [(cons? wof)
     (cons
      (guess-ke (first wof) ke)  
      (handle-key (rest wof) ke))]))

(define (handle-key wof ke)
  (local [(define (help-me-call-guess-ke g1s)
            (guess-ke g1s ke))]
    (map guess-ke wof)))

; guess-ke : Game1SString -> Game1String
; if the key pressed equals this Game1String, then maybe flip

(check-expect (guess-ke G1S-1 "a") G1S-1)
(check-expect (guess-ke G1S-1 "b") G1S-1)
(check-expect (guess-ke G1S-2 "a") G1S-1)
(check-expect (guess-ke G1S-2 "b") G1S-2)

(define (guess-ke g1s ke)
  (cond
    [(guessed? g1s) g1s]
    [(unguessed? g1s)
     (if (string=? ke (unguessed-char g1s))
         (make-guessed unguessed-char g1s)
         g1s)]))


